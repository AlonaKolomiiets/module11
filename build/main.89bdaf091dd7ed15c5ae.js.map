{"version":3,"sources":["webpack:///./task2.js"],"names":["makeTransaction","transaction","Promise","resolve","reject","min","max","delay","Math","floor","random","setTimeout","objResolve","id","time","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":"qKAkGMA,EAAkB,SAAAC,GACtB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAN+BC,EAAKC,EAM9BC,GANyBF,EAMS,IANJC,EAMS,IALxCE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAOlDM,YAAW,WAET,GADmBH,KAAKE,SAAW,GACnB,CACd,IAAIE,EAAa,CACfC,GAAIZ,EAAYY,GAChBC,KAAMP,GAERJ,EAAQS,QAERR,EAAOH,EAAYY,MAEpBN,OAIDQ,EAAa,SAAC,GAAiB,IAAfF,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACxBE,QAAQC,IAAR,eAA2BJ,EAA3B,iBAA8CC,EAA9C,OAGII,EAAW,SAAAL,GACfG,QAAQG,KAAR,gCAA6CN,EAA7C,8BAGFb,EAAgB,CAAEa,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,GAEhElB,EAAgB,CAAEa,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,GAEhElB,EAAgB,CAAEa,GAAI,GAAIO,OAAQ,KAAMC,KAAKN,GAAYO,MAAMJ,GAE/DlB,EAAgB,CAAEa,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,K","file":"main.89bdaf091dd7ed15c5ae.js","sourcesContent":["// Задание 1\n\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\"\n// через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое\n// передали во время вызова функции delay.\n\n// const delay = ms => {\n//   // Твой код\n//   return new Promise(resolve => {\n//     setTimeout(() => resolve(ms), ms);\n//   });\n// };\n\n// const logger = time => console.log(`Resolved after ${time}ms`);\n\n// // Вызовы функции для проверки\n// delay(2000).then(logger); // Resolved after 2000ms\n// delay(1000).then(logger); // Resolved after 1000ms\n// delay(1500).then(logger); // Resolved after 1500ms\n\n// Задание 2\n\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback,\n// а принимала всего два параметра allUsers и userName и возвращала промис.\n// const toggleUserState = (allUsers, userName, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === userName ? { ...user, active: !user.active } : user,\n//   );\n\n//   callback(updatedUsers);\n// };\n//*/\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n// const users = [\n//   { name: 'Mango', active: true },\n//   { name: 'Poly', active: false },\n//   { name: 'Ajax', active: true },\n//   { name: 'Lux', active: false },\n// ];\n\n// const toggleUserState = (allUsers, userName) => {\n//   return new Promise(resolve => {\n//     resolve(\n//       allUsers.map(user =>\n//         user.name === userName ? { ...user, active: !user.active } : user,\n//       ),\n//     );\n//   });\n// };\n// const logger = updatedUsers => console.table(updatedUsers);\n// toggleUserState(users, 'Mango').then(logger);\n// toggleUserState(users, 'Lux').then(logger);\n\n// // Задание 3\n\n// // Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции\n// // onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\n\n// const randomIntegerFromInterval = (min, max) => {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// };\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n\n//   setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//       onSuccess(transaction.id, delay);\n//     } else {\n//       onError(transaction.id);\n//     }\n//   }, delay);\n// };\n\n// const logSuccess = (id, time) => {\n//   console.log(`Transaction ${id} processed in ${time}ms`);\n// };\n\n// const logError = id => {\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\n// };\n\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n// // Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции\n// // onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n      if (canProcess) {\n        let objResolve = {\n          id: transaction.id,\n          time: delay,\n        };\n        resolve(objResolve);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"],"sourceRoot":""}